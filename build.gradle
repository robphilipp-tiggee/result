apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

def langLevel = 8
sourceCompatibility = langLevel
targetCompatibility = langLevel

repositories {
    mavenCentral()
    mavenLocal()
}

group 'com.tiggee.commons'
def appName = 'result'
def appVersion = '0.2.1-snapshot'

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}


if(hasProperty('sonatypeUsername')) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name appName
                    artifactId appName
                    packaging 'jar'
                    version = appVersion
                    // optionally artifactId can be defined here
                    description 'A functional approach for managing results from calls that may fail'
                    url 'https://github.com/tiggee-tech/result'

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/tiggee-tech/result/LICENSE'
                        }
                    }

                    organization {
                        name = 'com.tiggee.commons'
                        url = 'https://github.com/tiggee-tech'
                    }

                    developers {
                        developer {
                            id = "robphilipp-tiggee"
                            name = "Rob Philipp"
                            email = "rphilipp@tiggee.com"
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/tiggee-tech/result.git'
                        developerConnection = 'scm:git:ssh://git@github.com:tiggee-tech/result.git'
                        url = 'https://github.com/tiggee-tech/result'
                    }

                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/tiggee-tech/result/issues'
                    }
                }
            }
        }
    }
}

jar {
    if( project.hasProperty( 'env' ) && project.properties[ 'env' ] == 'prod' ) {
        println('**==----< Prod build >----==**')
        archivesBaseName = appName
        println("base: ${archivesBaseName}")
    }
    else {
        println('**==----< Dev build >----==**')
        archivesBaseName = appName + '-' + appVersion
        println("base: ${archivesBaseName}")
    }
}

configurations {
    providedRuntime
}

test {
    useJUnit()

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

dependencies {
    // google guava dependencies
    compile 'com.google.guava:guava:22.0'

    // logging
    compile 'org.slf4j:slf4j-api:1.7.25'

    // type check annotations
    compile 'edu.washington.cs.types.checker:checker-framework:1.7.5'

    // test dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.11'
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.mockito:mockito-core:2.8.9'
}

task wrapper(type: Wrapper) {
    gradleVersion='5.0'
}