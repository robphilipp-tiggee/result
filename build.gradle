//buildscript {
//    repositories {
//        maven { url "http://repo1.maven.org/maven2" }
//        jcenter()
//        mavenLocal()
//    }
//}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'

def langLevel = 10
sourceCompatibility = langLevel
targetCompatibility = langLevel

repositories {
    mavenCentral()
    mavenLocal()
}

group 'com.tiggee.commons'
def appName = 'result'
def appVersion = '0.1.0-snapshot'

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}


if(hasProperty('sonatypeUsername')) {
    signing {
        sign configurations.archives
    }

    publishing {
        publications {
            hashedWheelTimer(MavenPublication) {
                pom {
                    name = 'result'
                    description = 'A functional approach for managing results from calls that may fail'
                    url = 'https://github.com/tiggee-tech/result'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/tiggee-tech/result/LICENSE'
                        }
                    }
                    organization {
                        name = 'com.tiggee'
                        url = 'https://github.com/tiggee-tech'
                    }
                    developers {
                        developer {
                            id = "robphilipp-tiggee"
                            name = "Rob Philipp"
                            email = "rphilipp@tiggee.com"
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/tiggee-tech/result.git'
                        developerConnection = 'scm:git:ssh://git@github.com:tiggee-tech/result.git'
                        url = 'https://github.com/tiggee-tech/result'
                    }
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/tiggee-tech/result/issues'
                    }
                }
                groupId = group
                artifactId = appName
                version = appVersion

                from components.java

                // create the sign pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                artifact sourceJar

                artifact javadocJar

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "nexus"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

jar {
    if( project.hasProperty( 'env' ) && project.properties[ 'env' ] == 'prod' ) {
        println('**==----< Prod build >----==**')
        archivesBaseName = baseName
        println("base: ${archivesBaseName}")
    }
    else {
        println('**==----< Dev build >----==**')
        archivesBaseName = baseName + '-' + appVersion
        println("base: ${archivesBaseName}")
    }
}

configurations {
    providedRuntime
}

test {
    useJUnit()

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

dependencies {
    // google guava dependencies
    compile 'com.google.guava:guava:22.0'

    // logging
    compile 'org.slf4j:slf4j-api:1.7.25'

    // type check annotations
    compile 'edu.washington.cs.types.checker:checker-framework:1.7.5'

//    compile( 'com.github.rholder:guava-retrying:2.0.0' ) {
//        exclude group: 'com.google.guava', module: 'guava'
//    }

    // test dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.11'
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.mockito:mockito-core:2.8.9'
}

